---
- name: Evaluate {{ fuse_project }} namespace if not exists 
  k8s:
    api_version: v1
    kind: Namespace
    name: '{{ fuse_project }}'
    state: present

# RHPDS sepecific
- name: Delete the core limit range in  {{ fuse_project }} from RHPDS setting
  k8s:
    api_version: v1
    kind: LimitRange
    name: '{{ fuse_project }}-core-resource-limits'
    namespace: '{{ fuse_project }}'
    state: absent

- name: Evaluate Syndesis Operator Group
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'fuse-operatorgroup.yaml.j2') }}"

- name: Evaluate Syndesis Subscription
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'fuse-subscriptionyaml.j2') }}"


- name: Get data from samples-registry-credentials in openshift 
  k8s_info:
      api_version: v1
      kind: Secret
      name: samples-registry-credentials
      namespace: openshift
  register: samples_registry

- set_fact:
    samples_registry: "{{ samples_registry | replace('.dockerconfigjson','dockerconfigjson') }}"

- set_fact:
    docker_config_json: "{{ samples_registry.resources[0].data.dockerconfigjson | trim }}"

- name: Evaluate Syndesis Secrets
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'fuse-secret.yaml.j2') }}"

- name: Wait for Syndesis operator to install
  k8s_info:
      api_version: operators.coreos.com/v1alpha1
      kind: ClusterServiceVersion
      name: 'fuse-online-operator.v{{ fuse_version }}'
      namespace: '{{ fuse_project }}'
  register: csv_status
  until: (csv_status.resources is defined) and (csv_status.resources|length>0) and (csv_status.resources[0].status.phase == 'Succeeded')
  retries: 10
  delay: 30


- name: Evaluate Syndesis Cluster
  k8s:
    state: present
    resource_definition: "{{ lookup('template', 'fuse-cluster.yaml.j2') }}"

- name: extract route_subdomain
  k8s_info:
    kind: Ingress
  register: route_subdomain_r
  
- set_fact:
    route_subdomain: "{{ route_subdomain_r.resources[0].spec.domain | trim }}"

- name: Make sure Syndesis server is running
  k8s_info:
    kind: Pod
    label_selectors:
      - app=syndesis 
      - syndesis.io/component=syndesis-server 
  register: server_pod_detail
  until: (server_pod_detail.resources is defined) and (server_pod_detail.resources|length>0) and (server_pod_detail.resources[0].status.phase == 'Running')
  retries: 10
  delay: 30
